//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Assets/InputMap/VersusFighting.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @VersusFighting: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @VersusFighting()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""VersusFighting"",
    ""maps"": [
        {
            ""name"": ""VersusFightingMap"",
            ""id"": ""df50c719-9185-4c52-95f8-e03edaf1bca1"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""4d1fb141-134f-45cc-bb39-d2dbe23bef88"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Kick"",
                    ""type"": ""Value"",
                    ""id"": ""ae4967c5-d21e-4c51-a3ea-dfc33233d0e6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Punsh"",
                    ""type"": ""Value"",
                    ""id"": ""5c576959-9984-4281-a18a-ff6e8ecec54b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""HeadBump"",
                    ""type"": ""Value"",
                    ""id"": ""bb496efb-0fe8-44a0-ad2a-82a94610767f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Hit"",
                    ""type"": ""Value"",
                    ""id"": ""f63eebe4-4c94-463e-b939-04792b21f05b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Value"",
                    ""id"": ""863da991-7a83-4906-9c38-3e7ceb0e9951"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""9a2a6525-6b44-462c-8631-19b072ed67f4"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""c82d1350-abb6-4169-9638-74b458ee5bff"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""50815e24-4e5d-4b0b-b0b6-dd6b4877a719"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""f6935df4-b094-4810-84c9-4ed3c8032410"",
                    ""path"": ""<Gamepad>/leftStick/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c419c02e-0789-458b-ba20-abd17baa7ae7"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Kick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b6bddd27-802a-49e4-9e4b-346b62a0370f"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Kick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""90cd676c-48f6-4e4e-a6cc-7df312236cc7"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Punsh"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5bbfe0f0-12d4-41b8-903a-f284306a3714"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Punsh"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e09da8bc-0693-4f8f-ad38-ed03b2e42353"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HeadBump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6c247df2-73cf-4433-9276-e6637fa391ec"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HeadBump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""521df8de-6f56-48c3-9d71-6dfdf85837dd"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cf2086df-79ff-496a-ac60-a7d2d70c47c8"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6095d15a-f273-4439-8cff-1e62ca1eae84"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // VersusFightingMap
        m_VersusFightingMap = asset.FindActionMap("VersusFightingMap", throwIfNotFound: true);
        m_VersusFightingMap_Move = m_VersusFightingMap.FindAction("Move", throwIfNotFound: true);
        m_VersusFightingMap_Kick = m_VersusFightingMap.FindAction("Kick", throwIfNotFound: true);
        m_VersusFightingMap_Punsh = m_VersusFightingMap.FindAction("Punsh", throwIfNotFound: true);
        m_VersusFightingMap_HeadBump = m_VersusFightingMap.FindAction("HeadBump", throwIfNotFound: true);
        m_VersusFightingMap_Hit = m_VersusFightingMap.FindAction("Hit", throwIfNotFound: true);
        m_VersusFightingMap_Jump = m_VersusFightingMap.FindAction("Jump", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // VersusFightingMap
    private readonly InputActionMap m_VersusFightingMap;
    private List<IVersusFightingMapActions> m_VersusFightingMapActionsCallbackInterfaces = new List<IVersusFightingMapActions>();
    private readonly InputAction m_VersusFightingMap_Move;
    private readonly InputAction m_VersusFightingMap_Kick;
    private readonly InputAction m_VersusFightingMap_Punsh;
    private readonly InputAction m_VersusFightingMap_HeadBump;
    private readonly InputAction m_VersusFightingMap_Hit;
    private readonly InputAction m_VersusFightingMap_Jump;
    public struct VersusFightingMapActions
    {
        private @VersusFighting m_Wrapper;
        public VersusFightingMapActions(@VersusFighting wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_VersusFightingMap_Move;
        public InputAction @Kick => m_Wrapper.m_VersusFightingMap_Kick;
        public InputAction @Punsh => m_Wrapper.m_VersusFightingMap_Punsh;
        public InputAction @HeadBump => m_Wrapper.m_VersusFightingMap_HeadBump;
        public InputAction @Hit => m_Wrapper.m_VersusFightingMap_Hit;
        public InputAction @Jump => m_Wrapper.m_VersusFightingMap_Jump;
        public InputActionMap Get() { return m_Wrapper.m_VersusFightingMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(VersusFightingMapActions set) { return set.Get(); }
        public void AddCallbacks(IVersusFightingMapActions instance)
        {
            if (instance == null || m_Wrapper.m_VersusFightingMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_VersusFightingMapActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Kick.started += instance.OnKick;
            @Kick.performed += instance.OnKick;
            @Kick.canceled += instance.OnKick;
            @Punsh.started += instance.OnPunsh;
            @Punsh.performed += instance.OnPunsh;
            @Punsh.canceled += instance.OnPunsh;
            @HeadBump.started += instance.OnHeadBump;
            @HeadBump.performed += instance.OnHeadBump;
            @HeadBump.canceled += instance.OnHeadBump;
            @Hit.started += instance.OnHit;
            @Hit.performed += instance.OnHit;
            @Hit.canceled += instance.OnHit;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
        }

        private void UnregisterCallbacks(IVersusFightingMapActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Kick.started -= instance.OnKick;
            @Kick.performed -= instance.OnKick;
            @Kick.canceled -= instance.OnKick;
            @Punsh.started -= instance.OnPunsh;
            @Punsh.performed -= instance.OnPunsh;
            @Punsh.canceled -= instance.OnPunsh;
            @HeadBump.started -= instance.OnHeadBump;
            @HeadBump.performed -= instance.OnHeadBump;
            @HeadBump.canceled -= instance.OnHeadBump;
            @Hit.started -= instance.OnHit;
            @Hit.performed -= instance.OnHit;
            @Hit.canceled -= instance.OnHit;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
        }

        public void RemoveCallbacks(IVersusFightingMapActions instance)
        {
            if (m_Wrapper.m_VersusFightingMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IVersusFightingMapActions instance)
        {
            foreach (var item in m_Wrapper.m_VersusFightingMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_VersusFightingMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public VersusFightingMapActions @VersusFightingMap => new VersusFightingMapActions(this);
    public interface IVersusFightingMapActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnKick(InputAction.CallbackContext context);
        void OnPunsh(InputAction.CallbackContext context);
        void OnHeadBump(InputAction.CallbackContext context);
        void OnHit(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
    }
}
